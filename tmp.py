num = "612727199407071132"
target = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
tmp1 = [1, 0, "x", 9, 8, 7, 6, 5, 4, 3, 2]


def aatest(target, tmp):
    print(target)
    sum = 0



if __name__ == '__main__':
    aatest(target, tmp)


#  1.用熟悉的语言或伪代码实现身份证校验码计算方法：
# （1）将前面的身份证号码17位数分别乘以不同的系数。
# 从第一位到第十七位的系数分别为:7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2 ；
# （2）将这17位数字和系数相乘的结果相加；
# （3）用加出来和除以11，看余数是多少；
# （4）余数只可能有0,1,2,3,4,5,6,7,8,9,10这11个数字。其分别对应的最后一位身份证的号码为1,0,X,9,8,7,6,5,4,3,2，其中的X是罗马数字10；
# （5）通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ；如果余数是10，身份证的最后一位号码就是2

num = "612727199407071132"
target=[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2]
tmp=[0,1,2,3,4,5,6,7,8,9,10]
tmp1=[1,0,"x",9,8,7,6,5,4,3,2]
def test(num,target,tmp,tmp1):
    sum = 0
    for i in range(len(num)-1):
        sum+=int(num[i]) * target[i]
    sum1=sum%11
    print(sum1,sum)
    f=tmp.index(sum1)
    print(tmp1[f])


if __name__ == '__main__':
    test(num,target,tmp,tmp1)

    # for j in range(len(tmp)):
    #     if tmp[j]==sum1:
    #        return tmp1[j]== num[17]
    # return False